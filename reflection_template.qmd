---
title: "STAT 331 Portfolio"
author: "May"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: Lab 2, Question 1
surveys <- read_csv(here::here("week 2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: Lab 3, Question 2
evals <- read_csv(here::here("week 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3, Lab 4 Question 7
ca_childcare |>
  select(study_year, diff_counties, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"), 
               names_to = "age_group", values_to = "price") |>
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    diff_counties = fct_reorder2(diff_counties, study_year, price)
  ) |>
  ggplot(aes(x = study_year, y = price, color = diff_counties)) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = " ",
    color = "California Region"
  ) +
   theme_minimal(base_size = 8) +
  theme(aspect.ratio = 1, 
        panel.border = element_rect(color = "black", linewidth = 0.8),
  ) 


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: Lab 3, Question 4
evals |>
  count(course_id, teacher_id, question_no) |>
  filter(n == 1)

```

-   Numeric Example 2

```{r}
#| label: Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 


```

-   Character Example 1 (any context)

```{r}
#| label: Lab 3, Question 12
teacher_evals_clean |>
  filter (academic_degree %in% 
            c ("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarize (
     resp_students =  mean(resp_share, na.rm = TRUE),
     .groups = "drop") |>
   filter( resp_students == min(resp_students) |
           resp_students == max (resp_students)) |>
  arrange (resp_students) 
  
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1,


```

-   Numeric Example 2

```{r}
#| label: 


```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1, Lab 3 Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: Lab 4 Challenge

ca_childcare <- 
  left_join(
    x = childcare_costs,
    y = counties,
    by = join_by("county_fips_code")
  ) |>
  filter(state_abbreviation == "CA")
  

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2


```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r} 
#| label: wd-7-long, Lab 4 Question 7
ca_childcare |>
  select(study_year, diff_counties, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"), 
               names_to = "age_group", values_to = "price") |>
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    diff_counties = fct_reorder2(diff_counties, study_year, price)
  ) |>
  ggplot(aes(x = study_year, y = price, color = diff_counties)) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = " ",
    color = "California Region"
  ) +
   theme_minimal(base_size = 8) +
  theme(aspect.ratio = 1, 
        panel.border = element_rect(color = "black", linewidth = 0.8),
  ) 
```


-   `pivot_wider()`

```{r}
#| label: wd-7-wide, Lab 4 Question 5

income_by_region <- ca_childcare |>
  group_by(diff_counties, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "year_") |>
   arrange(desc(year_2018)
  )

print (income_by_region)
```


```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1, Challenge 3 Question 2
ggplot(data = teacher_evals_compare, aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +   # show % on y-axis
  scale_fill_manual(
    values = c("excellent" = "#C19AE8", "standard" = "#B98B46"),
    name = "Evaluation Rating"
  ) +
  labs(
    x = "Years of Experience",
    y = "",
    title = "Evaluation of Teachers' Use of Activities"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 11),
    legend.key.size = unit(1.2, "lines"),
    plot.title = element_text(size = 18),
    axis.text = element_text(size = 12),
    panel.border = element_rect(color = "black", linewidth = 0.8),
)

```
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1, Challenge 2 Question 16, Revised
#| label: rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )

```

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2, Challenge 2 Question 16, Revised
#| label: rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex))  #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme (
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )

```


-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3 Challenge 2 Question 16, Revised
#| label: rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )


```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4, Lab 2, Question 8, Revised
#| label: scatterplot 2
untitled_pink <- c("#a83279", "#FFD700")
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight, 
                     color = sex)) +
       scale_color_manual(values = untitled_pink) +
       geom_jitter(color = "blue", alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Species of an animal",
               y = "Weight of animal (g)",
               title = "Does species differ by weight?",  #entered space to make the code more readable 
               subtitle = "Separated by 
              <span style = 'color:#a83279;'>Female</span> and 
              <span style = 'color:#FFD700;'>Male</span>") +
        theme(
       axis.text.x = element_text(angle = 45),
       plot.title = element_text(size = 16, face = "bold"),
       panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
       plot.subtitle = element_markdown(),
       legend.position = "none" 
       )
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5 Challenge 2 Question 16
#| label: rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )


```

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize, Lab 3, Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    n_courses = n_distinct(course_id),
    avg_q1_score = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"  ) |>
  filter(n_courses >= 5) |>
  filter(avg_q1_score == min(avg_q1_score) | 
         avg_q1_score == max(avg_q1_score)) |>
  arrange (desc(avg_q1_score) )


```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
