---
title: "STAT 331 Portfolio"
author: "May"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#Lab 2, Question 1
surveys <- read_csv(here::here("week 2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#Lab 3, Question 2
evals <- read_csv(here::here("week 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}

#Lab 3 Question 5
#| echo: false
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3, 
#Lab 4 Question 7
n_regions <- n_distinct(ca_childcare$diff_counties)
region_palette <- colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(max(n_regions, 3))

ca_childcare |>
  select(
    study_year,
    diff_counties,
    mc_infant, mc_toddler, mc_preschool
  ) |>
  pivot_longer(
    cols      = starts_with("mc_"),
    names_to  = "age_group",
    values_to = "price"
  ) |>
  mutate(
    age_group = case_match (
      age_group,
      "mc_infant"    ~ "Infant",
      "mc_toddler"   ~ "Toddler",
      "mc_preschool" ~ "Preschool"
    ),
    age_group = factor(age_group, levels = c("Infant","Toddler","Preschool"))
  ) |>
  group_by(diff_counties) |>
  mutate(order_val = median(price, na.rm = TRUE)) |>
  ungroup() |>
  mutate(
    diff_counties = fct_reorder(diff_counties, order_val, .na_rm = TRUE)
  ) |>
  ggplot(
    mapping = aes(x = study_year, y = price, color = diff_counties)
  ) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~ age_group, nrow = 1) +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  scale_color_manual(name = "California Region", values = region_palette) +
 labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = ""
  ) +
 theme_minimal(base_size = 8) +
  theme(
    aspect.ratio = 1,
    panel.border = element_rect(color = "black", linewidth = 0.8)
  )




```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
# Lab 3, Question 4
evals |>
  count(course_id, teacher_id, question_no) |>
  filter(n == 1)

```

-   Numeric Example 2

```{r}
# Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 


```

-   Character Example 1 (any context)

```{r}
# Lab 3, Question 12
teacher_evals_clean |>
  filter (academic_degree %in% 
            c ("dr", "prof")) |>
  group_by(teacher_id, seniority, sex) |>
  summarize (
     resp_students =  mean(resp_share, na.rm = TRUE),
     .groups = "drop") |>
   filter( resp_students == min(resp_students) |
           resp_students == max (resp_students)) |>
  arrange (resp_students) 
  
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string, 
# Lab 5 
 gym_suspects <-
  inner_join( 
    x = get_fit_now_check_in,
    y = get_fit_now_member,
    by = join_by (membership_id == id)) |> #joining two tables
  filter(
    membership_status == "gold",
    str_detect(membership_id, "^48Z")) |>
  filter (check_in_date == '20180109') 

gym_suspects |>
  pull (name)

```
```

-   Date (example must use functions from **lubridate**)

```{r}
# Lab 5
concert_3x_dec <- facebook_event_checkin |>
 mutate(date = ymd(date)) |>      #convert numeric dates (like 20171210) into proper Date objects            
  filter(
    event_name == "SQL Symphony Concert", 
    date %within% interval(ymd("2017-12-01"), ymd("2017-12-31")) #between these dates 
  ) |>
  count(person_id, name = "n") |>
  filter(n == 3) |>
  select(person_id) 

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Challenge 4  Question 3
```{r}
childcare_data <- ca_childcare |>
  pivot_longer(
    cols = c(mcsa, mfccsa),
    names_to = "care_type",
    values_to = "full_time_median_price"
  ) |>
   mutate(
    care_type = recode(care_type,
      mcsa = "Center-Based Care ",
      mfccsa = "Family Childcare"
    ) 
    )

summary_table <- childcare_data |>
  group_by(care_type) |>
  summarise(
     n = n(),
    mean_price = mean(full_time_median_price),
    min_price = min(full_time_median_price),
    max_price = max(full_time_median_price)
                      
  )

summary_table
```



-   Numeric Example 2

```{r}
# Lab 3, Question 10
teacher_evals_clean |> #question-1-high-low
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    n_courses = n_distinct(course_id),
    avg_q1_score = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"  ) |>
  filter(n_courses >= 5) |>
  filter(avg_q1_score == min(avg_q1_score) | 
         avg_q1_score == max(avg_q1_score)) |>
  arrange (desc(avg_q1_score) )

```



-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1, 
# Lab 3 Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
# Lab 4 Question 7
# Revised: superseded recod () is superseded so I changed it to case_when()
n_regions <- n_distinct(ca_childcare$diff_counties)
region_palette <- colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(max(n_regions, 3))

ca_childcare |>
  select(
    study_year,
    diff_counties,
    mc_infant, mc_toddler, mc_preschool
  ) |>
  pivot_longer(
    cols      = starts_with("mc_"),
    names_to  = "age_group",
    values_to = "price"
  ) |>
  mutate(
    age_group = case_match (
      age_group,
      "mc_infant"    ~ "Infant",
      "mc_toddler"   ~ "Toddler",
      "mc_preschool" ~ "Preschool"
    ),
    age_group = factor(age_group, levels = c("Infant","Toddler","Preschool"))
  ) |>
  group_by(diff_counties) |>
  mutate(order_val = median(price, na.rm = TRUE)) |>
  ungroup() |>
  mutate(
    diff_counties = fct_reorder(diff_counties, order_val, .na_rm = TRUE)
  ) |>
  ggplot(
    mapping = aes(x = study_year, y = price, color = diff_counties)
  ) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~ age_group, nrow = 1) +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  scale_color_manual(name = "California Region", values = region_palette) +
 labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = ""
  ) +
 theme_minimal(base_size = 8) +
  theme(
    aspect.ratio = 1,
    panel.border = element_rect(color = "black", linewidth = 0.8)
  )


```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 5
 gym_suspects <-
  inner_join( 
    x = get_fit_now_check_in,
    y = get_fit_now_member,
    by = join_by (membership_id == id)) |> #joining two tables
  filter(
    membership_status == "gold",
    str_detect(membership_id, "^48Z")) |>
  filter (check_in_date == '20180109') 

gym_suspects |>
  pull (name)

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
# Lab 5
concert_3x_dec <- facebook_event_checkin |>
 mutate(date = ymd(date)) |>      #convert numeric dates (like 20171210) into proper Date objects            
  filter(
    event_name == "SQL Symphony Concert", 
    date %within% interval(ymd("2017-12-01"), ymd("2017-12-31")) #between these dates 
  ) |>
  count(person_id, name = "n") |>
  filter(n == 3) |>
  select(person_id) 

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
# Lab 4 Question 2

ca_childcare <- childcare_costs |>
  left_join(
    x = childcare_costs,
    y = counties,
    by = join_by("county_fips_code")
  ) |>
  filter(state_abbreviation == "CA")
  

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
# Lab 4 Question 2 Revised
# Made a left join into right join
ca_childcare <- childcare_costs |>
  right_join (
    x = counties,
    y = childcare_costs,
    by = join_by("county_fips_code")
  ) |>
  filter(state_abbreviation == "CA")
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2 
# Lab 4 Question 3
ca_childcare <- ca_childcare |>
  left_join(
    tax_rev |>
      mutate(
        county_name = entity_name,
        study_year  = year
      ) |>
      semi_join(
        ca_childcare |>
          select(county_name, study_year) |>
          distinct(),
        by = c("county_name", "study_year")
      ) |>
      arrange(county_name, study_year) |>
      distinct(county_name, study_year, .keep_all = TRUE),
    by = c("county_name", "study_year")
   ) #got inpiration from peer review 


```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5
 gym_suspects <-
  inner_join( 
    x = get_fit_now_check_in,
    y = get_fit_now_member,
    by = join_by (membership_id == id)) |> #joining two tables
  filter(
    membership_status == "gold",
    str_detect(membership_id, "^48Z")) |>
  filter (check_in_date == '20180109') 

gym_suspects |>
  pull (name)

```



-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
# Lab 5

gym_suspects_with_license <- 
  inner_join(
  x = gym_suspects, #joining gym_suspects table and person
  y = person,
  by = join_by(person_id == id)
)

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# Lab 5
# Keep only people who attended 3 concerts (semi join)
suspects <- semi_join(
  x = people_full |> rename(person_id = id),
  y = concert_3x_dec,
  by = "person_id"
)
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r} 
#| label: wd-7-long
#Lab 4 Question 7
ca_childcare |>
  select(study_year, diff_counties, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(cols = starts_with("mc_"), 
               names_to = "age_group", values_to = "price") |>
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    diff_counties = fct_reorder2(diff_counties, study_year, price)
  ) |>
  ggplot(aes(x = study_year, y = price, color = diff_counties)) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~age_group) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = " ",
    color = "California Region"
  ) +
   theme_minimal(base_size = 8) +
  theme(aspect.ratio = 1, 
        panel.border = element_rect(color = "black", linewidth = 0.8),
  ) 
```


-   `pivot_wider()`

```{r}
#| label: wd-7-wide
# Lab 4 Question 5

income_by_region <- ca_childcare |>
  group_by(diff_counties, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "year_") |>
   arrange(desc(year_2018)
  )

print (income_by_region)
```



## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   Lab 3
-   Lab 2 Challenge
-   Lab 3 Challenge
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Challenge 3 Question 2
ggplot(data = teacher_evals_compare, aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +   # show % on y-axis
  scale_fill_manual(
    values = c("excellent" = "#C19AE8", "standard" = "#B98B46"),
    name = "Evaluation Rating"
  ) +
  labs(
    x = "Years of Experience",
    y = "",
    title = "Evaluation of Teachers' Use of Activities"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 11),
    legend.key.size = unit(1.2, "lines"),
    plot.title = element_text(size = 18),
    axis.text = element_text(size = 12),
    panel.border = element_rect(color = "black", linewidth = 0.8),
)

```


-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2, 
#Lab 3 Question 5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 

```



-   Example of function formatting

```{r}
#| label: r-2-3
#Lab 3 Question5
teacher_evals_clean <- evals |>
  rename (sex = gender) |>
  mutate (teacher_id = as.character (teacher_id)) |>
  filter(no_participants >= 10) |>
  select (course_id, teacher_id, question_no, no_participants, 
         resp_share, SET_score_avg, percent_failed_cur, 
         academic_degree, seniority, sex) 

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#Lab 4 Question 5
#median-income-by-region-over-time

income_by_region <- ca_childcare |>
  group_by(diff_counties, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "Median_Income_") |>
   arrange(desc(Median_Income_2018)
  )

print (income_by_region)
```



-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Challenge 4 Question 4
childcare_data <- childcare_data |>
  mutate(
    care_type = recode(
      care_type,
      "mcsa" = "Center-Based Care",
      "mfccsa" = "Family Childcare")
    )
ggplot(childcare_data, aes(x = study_year, 
                           y = full_time_median_price, 
                           color = care_type)) +
  geom_point (alpha = 0.7, position = position_jitter(width = 0.2)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Full-Time Median Childcare Prices in California by Year and Care Type",
    subtitle = "Comparing Center-Based vs Family (In-Home) Care",
    x = "Study Year",
    y = "Full-Time Median Price (2018 dollars)",
    color = "Care Type"
  ) 

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2 Question 4
untitled_purple <- c("#5e3c99", "#7B68EE", "#a678d6")
ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length, color = sex)) +
       geom_point(alpha = 0.3) +
       scale_color_manual(values = untitled_purple) +
       facet_wrap(~species) +
       labs (  x = "Weight of animal (g)",
               y = "",
               title = "Does the weight of the animal affects the hindfoot length?",
               subtitle = "Hindfoot Length (mm), Separated by 
              <span style = 'color:#7B68EE;'>Female</span> and 
              <span style = 'color:#a678d6;'>Male</span>" )+
        theme(
        plot.title = element_text(size = 16, face = "bold"),
        plot.subtitle = element_markdown(),
        panel.border = element_rect(color = "black", linewidth = 0.8))



```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat 
#Challenge 4 Question 3
childcare_data <- ca_childcare |>
  pivot_longer(
    cols = c(mcsa, mfccsa),
    names_to = "care_type",
    values_to = "full_time_median_price"
  ) |>
   mutate(
    care_type = recode(care_type,
      mcsa = "Center-Based Care ",
      mfccsa = "Family Childcare"
    ) 
    )

summary_table <- childcare_data |>
  group_by(care_type) |>
  summarise(
     n = n(),
    mean_price = mean(full_time_median_price),
    min_price = min(full_time_median_price),
    max_price = max(full_time_median_price)
                      
  )

summary_table

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date 
#Challenge 4, Question 4
childcare_data <- childcare_data |>
  mutate(
    care_type = recode(
      care_type,
      "mcsa" = "Center-Based Care",
      "mfccsa" = "Family Childcare")
    )
ggplot(childcare_data, aes(x = study_year, 
                           y = full_time_median_price, 
                           color = care_type)) +
  geom_point (alpha = 0.7, position = position_jitter(width = 0.2)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Full-Time Median Childcare Prices in California by Year and Care Type",
    subtitle = "Comparing Center-Based vs Family (In-Home) Care",
    x = "Study Year",
    y = "Full-Time Median Price (2018 dollars)",
    color = "Care Type"
  ) 

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Challenge 2 Question 16, Revised
#rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )

```



-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
#Challenge 2 Question 16, Revised
# rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex))  #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme (
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" )

```


-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
#Challenge 2 Question 16, Revised
# rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 
    )

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
#Lab 2, Question 8, Revised
# scatterplot 2
untitled_pink <- c("#a83279", "#FFD700")
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight, 
                     color = sex)) +
       scale_color_manual(values = untitled_pink) +
       geom_jitter(color = "blue", alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Species of an animal",
               y = "Weight of animal (g)",
               title = "Does species differ by weight?",  #entered space to make the code more readable 
               subtitle = "Separated by 
              <span style = 'color:#a83279;'>Female</span> and 
              <span style = 'color:#FFD700;'>Male</span>") +
        theme(
       axis.text.x = element_text(angle = 45),
       plot.title = element_text(size = 16, face = "bold"),
       panel.border = element_rect(color = "black", fill = NA, linewidth = 0.8),
       plot.subtitle = element_markdown(),
       legend.position = "none" 
       )
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5 
#Challenge 2 Question 16
# rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )


```



**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1 
#Challenge 2 Question 16
#rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
#Challenge 2 Question 16
# rotated-boxplot
untitled_green <- c("#1d7c3c", "#F28500")
ggplot(data = surveys,
       mapping = aes(x = weight,
                     y = species, 
                     color = sex)) + #entered space to make the code more readable
       scale_color_manual(values = untitled_green) +
       geom_jitter(color = "blue",
                   alpha = 0.1) +
       geom_boxplot( outlier.shape = NULL) +
       labs (  x = "Weight of animal (g)",
               y = "Species of an animal",
               title = "Does species differ by weight?",   #entered space to make the code more readable
               subtitle = "Separated by 
              <span style = 'color:#1d7c3c;'>Female</span> and 
              <span style = 'color:#F28500;'>Male</span>" ) +
        theme(
    plot.title = element_text(size = 16, face = "bold"),
    panel.border = element_rect(color = "black",
                                fill = NA,
                                linewidth = 0.8),
    plot.subtitle = element_markdown(),
    legend.position = "none" 

    )

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
# Lab 3, Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    n_courses = n_distinct(course_id),
    avg_q1_score = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"  ) |>
  filter(n_courses >= 5) |>
  filter(avg_q1_score == min(avg_q1_score) | 
         avg_q1_score == max(avg_q1_score)) |>
  arrange (desc(avg_q1_score) )


```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 4 Question 6
lowest_income_2018 <- income_by_region |>
  slice_min(Median_Income_2018, n = 1) |>
  select(region = diff_counties, Median_Income_2018)

infant_price_2018 <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(diff_counties) |>
  summarise(median_weekly_price = median(mc_infant, na.rm = TRUE), .groups = "drop") |>
  rename(region = diff_counties)

lowest_price_2018 <- infant_price_2018 |>
  slice_min(median_weekly_price, n = 1)

lowest_price_2018
lowest_income_2018


```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1 
#Lab 4 Question 5, Revised
#median-income-by-region-over-time

income_by_region <- ca_childcare |>
  group_by(diff_counties, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "Median_Income_") |>
   arrange(desc(Median_Income_2018)
  )

print (income_by_region)

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3 
#Lab 3 Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    n_courses = n_distinct(course_id),
    avg_q1_score = mean(SET_score_avg, na.rm = TRUE),
    .groups = "drop"  ) |>
  filter(n_courses >= 5) |>
  filter(avg_q1_score == min(avg_q1_score) | 
         avg_q1_score == max(avg_q1_score)) |>
  arrange (desc(avg_q1_score) )

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1


```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2 
#Lab 4 Question 5

income_by_region <- ca_childcare |>
  group_by(diff_counties, study_year) |>
  summarise(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(study_year %in% c(2008, 2018)) |>
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "year_") |>
   arrange(desc(year_2018)
  )

print (income_by_region)

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
#Lab 5
person |>
  filter(address_street_name == "Northwestern Dr") |>
  slice_max(address_number, n = 1) |>
  pull (id)
#found one of the witness


person |>
  filter(str_detect(name, "Annabel"), address_street_name == "Franklin Ave") |>
  pull (id)
  #found second of the witness
```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#Lab 4 Question 7
n_regions <- n_distinct(ca_childcare$diff_counties)
region_palette <- colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(max(n_regions, 3))

ca_childcare |>
  select(
    study_year,
    diff_counties,
    mc_infant, mc_toddler, mc_preschool
  ) |>
  pivot_longer(
    cols      = starts_with("mc_"),
    names_to  = "age_group",
    values_to = "price"
  ) |>
  mutate(
    age_group = case_match (
      age_group,
      "mc_infant"    ~ "Infant",
      "mc_toddler"   ~ "Toddler",
      "mc_preschool" ~ "Preschool"
    ),
    age_group = factor(age_group, levels = c("Infant","Toddler","Preschool"))
  ) |>
  group_by(diff_counties) |>
  mutate(order_val = median(price, na.rm = TRUE)) |>
  ungroup() |>
  mutate(
    diff_counties = fct_reorder(diff_counties, order_val, .na_rm = TRUE)
  ) |>
  ggplot(
    mapping = aes(x = study_year, y = price, color = diff_counties)
  ) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~ age_group, nrow = 1) +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  scale_color_manual(name = "California Region", values = region_palette) +
 labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = ""
  ) +
 theme_minimal(base_size = 8) +
  theme(
    aspect.ratio = 1,
    panel.border = element_rect(color = "black", linewidth = 0.8)
  )

 

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7
n_regions <- n_distinct(ca_childcare$diff_counties)
region_palette <- colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(max(n_regions, 3))

ca_childcare |>
  select(
    study_year,
    diff_counties,
    mc_infant, mc_toddler, mc_preschool
  ) |>
  pivot_longer(
    cols      = starts_with("mc_"),
    names_to  = "age_group",
    values_to = "price"
  ) |>
  mutate(
    age_group = case_match (
      age_group,
      "mc_infant"    ~ "Infant",
      "mc_toddler"   ~ "Toddler",
      "mc_preschool" ~ "Preschool"
    ),
    age_group = factor(age_group, levels = c("Infant","Toddler","Preschool"))
  ) |>
  group_by(diff_counties) |>
  mutate(order_val = median(price, na.rm = TRUE)) |>
  ungroup() |>
  mutate(
    diff_counties = fct_reorder(diff_counties, order_val, .na_rm = TRUE)
  ) |>
  ggplot(
    mapping = aes(x = study_year, y = price, color = diff_counties)
  ) +
  geom_point(alpha = 0.6) +
  geom_smooth() +
  facet_wrap(~ age_group, nrow = 1) +
  scale_x_continuous(breaks = c(2008, 2010, 2012, 2014, 2016, 2018)) +
  scale_color_manual(name = "California Region", values = region_palette) +
 labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = ""
  ) +
 theme_minimal(base_size = 8) +
  theme(
    aspect.ratio = 1,
    panel.border = element_rect(color = "black", linewidth = 0.8)
  )

 

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1 
#Challenge 3 Question 3
chisq.test(
  table(teacher_evals_compare$SET_level, teacher_evals_compare$sen_level)
)

```

-   Example 2

```{r}
#| label: dsm-2-2 
#Lab 2 Question 17
#anova
summary(aov(weight ~ species, data = surveys))

```

-   Example 3

```{r}
#| label: dsm-2-3 
#Lab 1 Question 5
t.test(len ~ supp, 
       data = ToothGrowth,
       var.equal = FALSE,  
       alternative = "two.sided",
       conf.level = 0.95)

```

## Revising My Thinking

Earlier in the course, when there was conclusion I just wrote what the table and rows represented. However, through your feedback I expanded my thinking of things like how were the data collected, who collected them, when they were collected, and why there were collected. Initially, I treated code as something personal — as long as it worked for me, I didn’t worry about how others would reproduce it. After your feedback emphasizing reproducibility, I began documenting function headers and table of contents. In Lab 3 I also implemented this idea by changing the table headers to something more informative. Rather than showing "Year 2019" I changed it into "Median Income 2019" which tells the viewers more. I also learned the importance of professonial looking document by adding the "warning:false" and "message:false" Quarto format. I learned to avoid displaying messages related to data import or package loading, as they do not add value for the reader and can make your document appear cluttered. Lastly, before this course, I viewed visualization mainly as an aesthetic step where I make graphs look “nice.” Throughout the course I learned bolding title or adding a border to the plot makes the plot stand out more. 


<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

Beyond the course,I extened my thinking through exploring different color palletes. In lab 4 I explored the RColorBrewer package with the Paried palletes. Additionally in Challenge Lab 2 I explored different colors that is beyond just simple colors like "red." An example I extended my thinking was in Lab 4 instead of selecting columns names I simplified it to columns that starts with "mc" because all of the columns I wanted all started with "mc". Throughout the course, I extended my thinking by learning to approach code to answer the question, but as a way to reason through data quality, and communication. In my early work, I focused mostly on producing results that “looked right,” but through feedback and practice, I began thinking more critically about how my code ensured accuracy and clarity. For example, in Lab 5 I had a hard time joining four different tables (facebook event check in, person, driver lincese, income tables). I realized each join defines a logical link between data tables and that the join order determines which observations are retained. For example, in the final version of my code, I first used inner_join() to connect person with drivers_license, then joined that result to income using a shared ssn, and finally used a semi_join() to keep only those people who attended three concerts in December. This process helped me see joins not just as technical operations, but as tools for refining a dataset to match the exact scope of data I want. For data plots I have extneded by thinking I learned that thoughtful design choices  like percentage formatting and consistent labeling  help ensure that visual outputs support the analytical information I want to tell the viewers.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->
Peer Review I gave:
"Hello Lucy,

I really like how concise your code was. The code produces the results needed effectively. In addition, the format of the code was clear to read. One thing I notice is that in some of the table headers the labels could be more defined. For example in question 6, the header of "n_distinct(teacher_id)" could be changed into "unqiue instructers" to better inform what the table was telling.  Also, for the package I noticed you added the "library (knitr)." I don't think it is necessary. Other than that, everything else look great!"

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

When I first started the weekly pair programming activites I was hesistant to take risks and make mistakes. After I made a mistake I brushed it over and dind't really learn or ask my partner for more elaboration. When something my partner did was something I didn't know I just brushed it over. This mindset made me cautious and prevented me from learning more. However over a several times, I learned to communicate more and be more comfortable. I became more comfortable asking questions, challenging assumptions, and discussing multiple possible solutions before deciding on one. These skills helped us write cleaner, more efficient code and also strengthened my confidence in speaking up. In addition, I also discovered the importance of active listening and empathy. Every partner had a different set of skills and way of doing code and thinking. This furthur helped me learn about different ways of how to code the same type of questions. Beyond technical skills, these pair programming sessions taught me about trust and communication.
